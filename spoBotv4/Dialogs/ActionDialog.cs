using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AuthBot;
using AuthBot.Dialogs;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Connector;
using System.Configuration;
using spoBotv4.Models;

namespace spoBotv4.Dialogs
{
    //Bot Framework must be Serialized to maintain state
    [Serializable]
    
    public class ActionDialog : IDialog<string>
    {
        //Defines JSON structure for LUIS
        public static Rootobject strLuis;
        public const string sHelp = "**Welcome to the SpoBot!** \n\n This bot demonstrates modern authentication using oAuthv2 \n\n and integration with [Azure Active Directory](https://azure.microsoft.com/en-us/documentation/services/active-directory/), natural language \n\n processing using [LUIS.ai](https://luis.ai), and integration with \n\n [Office 365 and Sharepoint Online](https://products.office.com/en-us/home). \n\n [More information on the Microsoft Bot Framework](https://dev.botframework.com)";

        //Handler for IDialog Interface
        public async Task StartAsync(IDialogContext context)
        {
            context.Wait(MessageReceivedAsync);
        }
        
        //Primary menthod for routing incoming messages appropriately
        public async Task MessageReceivedAsync(IDialogContext context, IAwaitable<Message> item)
        {
            var message = await item;
            switch (message.Text.ToLower())
            {
                //Using AuthBot NUGET package to authenticate user against Azure Active Directory via oAuthV2
                case "logon":
                case "login":
                    if (string.IsNullOrEmpty(await context.GetAccessToken(ConfigurationManager.AppSettings["ActiveDirectory.ResourceId"])))
                    {
                        await context.Forward(new AzureAuthDialog(ConfigurationManager.AppSettings["ActiveDirectory.ResourceId"]), this.ResumeAfterAuth, message, CancellationToken.None);
                    }
                    else
                    {
                        await context.PostAsync("You're already logged.\n\n If you need assistance, type 'help'");
                        context.Wait(MessageReceivedAsync);
                    }
                    break;
                case "logoff":
                case "logout":
                    await context.Logout();
                    context.Wait(MessageReceivedAsync);
                    break;
                case "help":
                case "start":
                case "/help":
                case "/start":
                    await context.PostAsync(string.Format(sHelp));
                    context.Wait(MessageReceivedAsync);
                    break;
                //default case statement will assume the request is a query against the Sharepoint Online List.  First it will re-evalute valid AccessToken generated by authentication process.
                default:
                    if (string.IsNullOrEmpty(await context.GetAccessToken(ConfigurationManager.AppSettings["ActiveDirectory.ResourceId"])))
                    {
                        await context.Forward(new AzureAuthDialog(ConfigurationManager.AppSettings["ActiveDirectory.ResourceId"]), this.ResumeAfterAuth, message, CancellationToken.None);
                    }
                    else if (context.GetAccessToken(ConfigurationManager.AppSettings["ActiveDirectory.ResourceId"]).Result != null)
                    {
                        //Creates model from LUIS.ai based on message.text
                        strLuis = await LuisDialog.ParseUserInput(message.Text);

                        //evaluates LUIS intent was returned.
                        if (strLuis.intents.Count() > 0)
                        {
                            //LUIS always returns the highest scoring intent first [0] in the array
                            switch (strLuis.intents[0].intent)
                            {
                                //Implementation of Natural Language Help queries.  For example:  "I need help" or "Help me".
                                case "Help":
                                    await context.PostAsync(string.Format(sHelp));
                                    context.Wait(MessageReceivedAsync);
                                    break;
                                //The intent returned was none and a suggestion is made to user.                           
                                case "None":
                                    var noIntent = $"Sorry, I did not understand your intent. \n\n For assistance, type 'help'.";
                                    await context.PostAsync(noIntent);
                                    context.Wait(MessageReceivedAsync);
                                    break;
                                //These are the primary Intents defined in the LUIS Model.
                                case "LUISIntent1":
                                case "LUISIntent2":
                                    //When a primary intent is established, call the GoodIntents Mentod in the LuisDialog class file.  Pass the existing conversation context and the LUIS result string.
                                    var result = await LuisDialog.GoodIntent(context, strLuis);
                                    if (result == "[]")
                                    {
                                        //[the cafe's website](http...) is used by the Bot Framework to format a URL in the results.
                                        var sEmptyResult = $"The result set is empty.";
                                        await context.PostAsync(sEmptyResult);
                                        context.Wait(MessageReceivedAsync);
                                        return;
                                    }
                                    else
                                    {
                                        //Passes the results back to the user.
                                        await context.PostAsync(result);
                                        context.Wait(MessageReceivedAsync);
                                    }
                                    break;
                                default:
                                    //if intent does not match, then do something....
                                    //right now if this is reached, the bot returns a 500 Internal Server Error message.  Need error handling here....
                                    break;
                            }
                        }
                        else
                        {
                            var sBadIntent = $"Sorry, I did not understand your intent. \n\n For assistance, type 'help'.";
                            await context.PostAsync(sBadIntent);
                            context.Wait(MessageReceivedAsync);
                        }
                    }
                    else
                    {
                        var sBadIntent = $"Sorry, I did not understand your intent. \n\n For assistance, type 'help'.";
                        await context.PostAsync(sBadIntent);
                        context.Wait(MessageReceivedAsync);
                    }
                    break;
            }    
        }

        //This method is used by AuthBot to return a random number code to ensure unique conversation IDs when multiple sessions are active.
        private async Task ResumeAfterAuth(IDialogContext context, IAwaitable<string> result)
        {
            var message = await result;
            await context.PostAsync(message);
            context.Wait(MessageReceivedAsync);
        }
    }
}